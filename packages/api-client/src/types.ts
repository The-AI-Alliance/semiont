/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Health Check
         * @description Check if the API is operational and database is connected
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Health status of the API */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            status: string;
                            message: string;
                            version: string;
                            timestamp: string;
                            /** @enum {string} */
                            database: "connected" | "disconnected" | "unknown";
                            environment: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tokens/local": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Local Development Authentication
         * @description Authenticate with email only (development mode only)
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /** Format: email */
                        email: string;
                    };
                };
            };
            responses: {
                /** @description Successful authentication */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            success: boolean;
                            user: {
                                id: string;
                                email: string;
                                name: string | null;
                                image: string | null;
                                domain: string;
                                isAdmin: boolean;
                            };
                            token: string;
                            isNewUser: boolean;
                        };
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            error: string;
                            code?: string;
                            details?: unknown;
                        };
                    };
                };
                /** @description Local auth not enabled */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            error: string;
                            code?: string;
                            details?: unknown;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tokens/google": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Google OAuth Authentication
         * @description Authenticate with Google OAuth access token
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        access_token: string;
                    };
                };
            };
            responses: {
                /** @description Successful authentication */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            success: boolean;
                            user: {
                                id: string;
                                email: string;
                                name: string | null;
                                image: string | null;
                                domain: string;
                                isAdmin: boolean;
                            };
                            token: string;
                            isNewUser: boolean;
                        };
                    };
                };
                /** @description Invalid request or authentication failed */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            error: string;
                            code?: string;
                            details?: unknown;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tokens/refresh": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Refresh Access Token
         * @description Exchange a refresh token for a new access token
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /**
                         * @description Refresh token obtained during login
                         * @example eyJhbGciOiJIUzI1NiIs...
                         */
                        refreshToken: string;
                    };
                };
            };
            responses: {
                /** @description New access token generated */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            access_token: string;
                        };
                    };
                };
                /** @description Invalid or expired refresh token */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            error: string;
                            code?: string;
                            details?: unknown;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/tokens/mcp-generate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Generate MCP Token
         * @description Generate a short-lived token for MCP server
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description MCP token generated */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            refresh_token: string;
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            error: string;
                            code?: string;
                            details?: unknown;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Current User
         * @description Get information about the authenticated user
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description User information */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            id: string;
                            email: string;
                            name: string | null;
                            image: string | null;
                            domain: string;
                            provider: string;
                            isAdmin: boolean;
                            isActive: boolean;
                            termsAcceptedAt: string | null;
                            lastLogin: string | null;
                            created: string;
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            error: string;
                            code?: string;
                            details?: unknown;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/accept-terms": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Accept Terms
         * @description Mark terms as accepted for the current user
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Terms accepted successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            success: boolean;
                            message: string;
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            error: string;
                            code?: string;
                            details?: unknown;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Logout
         * @description Logout the current user
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Logged out successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            success: boolean;
                            message: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Service Status
         * @description Get service status and feature availability
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Service status information */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            status: string;
                            version: string;
                            features: {
                                semanticContent: string;
                                collaboration: string;
                                rbac: string;
                            };
                            message: string;
                            authenticatedAs?: string;
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            error: string;
                            code?: string;
                            details?: unknown;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List All Users
         * @description Get a list of all users (admin only)
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description List of users */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            success: boolean;
                            users: {
                                id: string;
                                email: string;
                                name: string | null;
                                image: string | null;
                                domain: string;
                                provider: string;
                                isAdmin: boolean;
                                isActive: boolean;
                                lastLogin: string | null;
                                created: string;
                                updatedAt: string;
                            }[];
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            error: string;
                            code?: string;
                            details?: unknown;
                        };
                    };
                };
                /** @description Forbidden - Admin access required */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            error: string;
                            code?: string;
                            details?: unknown;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/users/stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * User Statistics
         * @description Get user statistics (admin only)
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description User statistics */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            success: boolean;
                            stats: {
                                totalUsers: number;
                                activeUsers: number;
                                adminUsers: number;
                                regularUsers: number;
                                domainBreakdown: {
                                    domain: string;
                                    count: number;
                                }[];
                                recentSignups: {
                                    id: string;
                                    email: string;
                                    name: string | null;
                                    created: string;
                                }[];
                            };
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            error: string;
                            code?: string;
                            details?: unknown;
                        };
                    };
                };
                /** @description Forbidden - Admin access required */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            error: string;
                            code?: string;
                            details?: unknown;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/users/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Delete User
         * @description Delete a user account (admin only, cannot delete own account)
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description User deleted successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            success: boolean;
                            message: string;
                        };
                    };
                };
                /** @description Cannot delete own account */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            error: string;
                            code?: string;
                            details?: unknown;
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            error: string;
                            code?: string;
                            details?: unknown;
                        };
                    };
                };
                /** @description Forbidden - Admin access required */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            error: string;
                            code?: string;
                            details?: unknown;
                        };
                    };
                };
                /** @description User not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            error: string;
                            code?: string;
                            details?: unknown;
                        };
                    };
                };
            };
        };
        options?: never;
        head?: never;
        /**
         * Update User
         * @description Update user properties (admin only)
         */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        isAdmin?: boolean;
                        isActive?: boolean;
                        name?: string;
                    };
                };
            };
            responses: {
                /** @description User updated successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            success: boolean;
                            user: {
                                id: string;
                                email: string;
                                name: string | null;
                                image: string | null;
                                domain: string;
                                provider: string;
                                isAdmin: boolean;
                                isActive: boolean;
                                lastLogin: string | null;
                                created: string;
                                updatedAt: string;
                            };
                        };
                    };
                };
                /** @description Invalid request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            error: string;
                            code?: string;
                            details?: unknown;
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            error: string;
                            code?: string;
                            details?: unknown;
                        };
                    };
                };
                /** @description Forbidden - Admin access required */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            error: string;
                            code?: string;
                            details?: unknown;
                        };
                    };
                };
                /** @description User not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            error: string;
                            code?: string;
                            details?: unknown;
                        };
                    };
                };
            };
        };
        trace?: never;
    };
    "/api/admin/oauth/config": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get OAuth Configuration
         * @description Get OAuth provider configuration (admin only, read-only)
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OAuth configuration */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            providers: {
                                name: string;
                                isConfigured: boolean;
                                clientId: string;
                            }[];
                            allowedDomains: string[];
                        };
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            error: string;
                            code?: string;
                            details?: unknown;
                        };
                    };
                };
                /** @description Forbidden - Admin access required */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            error: string;
                            code?: string;
                            details?: unknown;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/documents": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Documents
         * @description List all documents with optional filters
         */
        get: {
            parameters: {
                query?: {
                    offset?: number | null;
                    limit?: number | null;
                    entityType?: string;
                    archived?: "true" | "false" | boolean;
                    search?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Documents listed successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            documents: {
                                id: string;
                                name: string;
                                format: string;
                                archived: boolean;
                                entityTypes: string[];
                                locale?: string;
                                /** @enum {string} */
                                creationMethod: "api" | "upload" | "ui" | "reference" | "clone" | "generated";
                                sourceAnnotationId?: string;
                                sourceDocumentId?: string;
                                creator: string;
                                created: string;
                                contentChecksum: string;
                            }[];
                            total: number;
                            offset: number;
                            limit: number;
                        };
                    };
                };
            };
        };
        put?: never;
        /**
         * Create Document
         * @description Create a new document
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        name: string;
                        content: string;
                        format: string;
                        entityTypes: string[];
                        locale?: string;
                        creationMethod?: string;
                        sourceAnnotationId?: string;
                        sourceDocumentId?: string;
                    };
                };
            };
            responses: {
                /** @description Document created successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            document: {
                                id: string;
                                name: string;
                                format: string;
                                archived: boolean;
                                entityTypes: string[];
                                locale?: string;
                                /** @enum {string} */
                                creationMethod: "api" | "upload" | "ui" | "reference" | "clone" | "generated";
                                sourceAnnotationId?: string;
                                sourceDocumentId?: string;
                                creator: string;
                                created: string;
                                contentChecksum: string;
                            };
                            annotations: {
                                id: string;
                                /** @enum {string} */
                                motivation: "assessing" | "bookmarking" | "classifying" | "commenting" | "describing" | "editing" | "highlighting" | "identifying" | "linking" | "moderating" | "questioning" | "replying" | "tagging";
                                target: {
                                    source: string;
                                    selector: {
                                        /** @enum {string} */
                                        type: "TextPositionSelector";
                                        exact: string;
                                        offset: number;
                                        length: number;
                                    } | {
                                        /** @enum {string} */
                                        type: "TextQuoteSelector";
                                        exact: string;
                                        prefix?: string;
                                        suffix?: string;
                                    } | ({
                                        /** @enum {string} */
                                        type: "TextPositionSelector";
                                        exact: string;
                                        offset: number;
                                        length: number;
                                    } | {
                                        /** @enum {string} */
                                        type: "TextQuoteSelector";
                                        exact: string;
                                        prefix?: string;
                                        suffix?: string;
                                    })[];
                                };
                                body: {
                                    /** @enum {string} */
                                    type: "TextualBody" | "SpecificResource";
                                    value?: string;
                                    format?: string;
                                    language?: string;
                                    source?: string | null;
                                    /** @default [] */
                                    entityTypes: string[];
                                };
                                creator: {
                                    id: string;
                                    /** @enum {string} */
                                    type: "Person" | "Organization" | "Software";
                                    name: string;
                                    nickname?: string;
                                    email?: string;
                                    email_sha1?: string;
                                    homepage?: string;
                                };
                                created: string;
                                modified?: string;
                                generator?: {
                                    id: string;
                                    /** @enum {string} */
                                    type: "Person" | "Organization" | "Software";
                                    name: string;
                                    nickname?: string;
                                    email?: string;
                                    email_sha1?: string;
                                    homepage?: string;
                                };
                            }[];
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/documents/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search Documents
         * @description Search documents by name
         */
        get: {
            parameters: {
                query: {
                    q: string;
                    limit?: number | null;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Search results */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            documents: {
                                id: string;
                                name: string;
                                format: string;
                                archived: boolean;
                                entityTypes: string[];
                                locale?: string;
                                /** @enum {string} */
                                creationMethod: "api" | "upload" | "ui" | "reference" | "clone" | "generated";
                                sourceAnnotationId?: string;
                                sourceDocumentId?: string;
                                creator: string;
                                created: string;
                                contentChecksum: string;
                            }[];
                            total: number;
                            offset: number;
                            limit: number;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/documents/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Document
         * @description Get a document by ID
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Document retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            document: {
                                id: string;
                                name: string;
                                format: string;
                                archived: boolean;
                                entityTypes: string[];
                                locale?: string;
                                /** @enum {string} */
                                creationMethod: "api" | "upload" | "ui" | "reference" | "clone" | "generated";
                                sourceAnnotationId?: string;
                                sourceDocumentId?: string;
                                creator: string;
                                created: string;
                                contentChecksum: string;
                            };
                            annotations: {
                                id: string;
                                /** @enum {string} */
                                motivation: "assessing" | "bookmarking" | "classifying" | "commenting" | "describing" | "editing" | "highlighting" | "identifying" | "linking" | "moderating" | "questioning" | "replying" | "tagging";
                                target: {
                                    source: string;
                                    selector: {
                                        /** @enum {string} */
                                        type: "TextPositionSelector";
                                        exact: string;
                                        offset: number;
                                        length: number;
                                    } | {
                                        /** @enum {string} */
                                        type: "TextQuoteSelector";
                                        exact: string;
                                        prefix?: string;
                                        suffix?: string;
                                    } | ({
                                        /** @enum {string} */
                                        type: "TextPositionSelector";
                                        exact: string;
                                        offset: number;
                                        length: number;
                                    } | {
                                        /** @enum {string} */
                                        type: "TextQuoteSelector";
                                        exact: string;
                                        prefix?: string;
                                        suffix?: string;
                                    })[];
                                };
                                body: {
                                    /** @enum {string} */
                                    type: "TextualBody" | "SpecificResource";
                                    value?: string;
                                    format?: string;
                                    language?: string;
                                    source?: string | null;
                                    /** @default [] */
                                    entityTypes: string[];
                                };
                                creator: {
                                    id: string;
                                    /** @enum {string} */
                                    type: "Person" | "Organization" | "Software";
                                    name: string;
                                    nickname?: string;
                                    email?: string;
                                    email_sha1?: string;
                                    homepage?: string;
                                };
                                created: string;
                                modified?: string;
                                generator?: {
                                    id: string;
                                    /** @enum {string} */
                                    type: "Person" | "Organization" | "Software";
                                    name: string;
                                    nickname?: string;
                                    email?: string;
                                    email_sha1?: string;
                                    homepage?: string;
                                };
                            }[];
                            highlights: {
                                id: string;
                                /** @enum {string} */
                                motivation: "assessing" | "bookmarking" | "classifying" | "commenting" | "describing" | "editing" | "highlighting" | "identifying" | "linking" | "moderating" | "questioning" | "replying" | "tagging";
                                target: {
                                    source: string;
                                    selector: {
                                        /** @enum {string} */
                                        type: "TextPositionSelector";
                                        exact: string;
                                        offset: number;
                                        length: number;
                                    } | {
                                        /** @enum {string} */
                                        type: "TextQuoteSelector";
                                        exact: string;
                                        prefix?: string;
                                        suffix?: string;
                                    } | ({
                                        /** @enum {string} */
                                        type: "TextPositionSelector";
                                        exact: string;
                                        offset: number;
                                        length: number;
                                    } | {
                                        /** @enum {string} */
                                        type: "TextQuoteSelector";
                                        exact: string;
                                        prefix?: string;
                                        suffix?: string;
                                    })[];
                                };
                                body: {
                                    /** @enum {string} */
                                    type: "TextualBody" | "SpecificResource";
                                    value?: string;
                                    format?: string;
                                    language?: string;
                                    source?: string | null;
                                    /** @default [] */
                                    entityTypes: string[];
                                };
                                creator: {
                                    id: string;
                                    /** @enum {string} */
                                    type: "Person" | "Organization" | "Software";
                                    name: string;
                                    nickname?: string;
                                    email?: string;
                                    email_sha1?: string;
                                    homepage?: string;
                                };
                                created: string;
                                modified?: string;
                                generator?: {
                                    id: string;
                                    /** @enum {string} */
                                    type: "Person" | "Organization" | "Software";
                                    name: string;
                                    nickname?: string;
                                    email?: string;
                                    email_sha1?: string;
                                    homepage?: string;
                                };
                            }[];
                            references: {
                                id: string;
                                /** @enum {string} */
                                motivation: "assessing" | "bookmarking" | "classifying" | "commenting" | "describing" | "editing" | "highlighting" | "identifying" | "linking" | "moderating" | "questioning" | "replying" | "tagging";
                                target: {
                                    source: string;
                                    selector: {
                                        /** @enum {string} */
                                        type: "TextPositionSelector";
                                        exact: string;
                                        offset: number;
                                        length: number;
                                    } | {
                                        /** @enum {string} */
                                        type: "TextQuoteSelector";
                                        exact: string;
                                        prefix?: string;
                                        suffix?: string;
                                    } | ({
                                        /** @enum {string} */
                                        type: "TextPositionSelector";
                                        exact: string;
                                        offset: number;
                                        length: number;
                                    } | {
                                        /** @enum {string} */
                                        type: "TextQuoteSelector";
                                        exact: string;
                                        prefix?: string;
                                        suffix?: string;
                                    })[];
                                };
                                body: {
                                    /** @enum {string} */
                                    type: "TextualBody" | "SpecificResource";
                                    value?: string;
                                    format?: string;
                                    language?: string;
                                    source?: string | null;
                                    /** @default [] */
                                    entityTypes: string[];
                                };
                                creator: {
                                    id: string;
                                    /** @enum {string} */
                                    type: "Person" | "Organization" | "Software";
                                    name: string;
                                    nickname?: string;
                                    email?: string;
                                    email_sha1?: string;
                                    homepage?: string;
                                };
                                created: string;
                                modified?: string;
                                generator?: {
                                    id: string;
                                    /** @enum {string} */
                                    type: "Person" | "Organization" | "Software";
                                    name: string;
                                    nickname?: string;
                                    email?: string;
                                    email_sha1?: string;
                                    homepage?: string;
                                };
                            }[];
                            entityReferences: {
                                id: string;
                                /** @enum {string} */
                                motivation: "assessing" | "bookmarking" | "classifying" | "commenting" | "describing" | "editing" | "highlighting" | "identifying" | "linking" | "moderating" | "questioning" | "replying" | "tagging";
                                target: {
                                    source: string;
                                    selector: {
                                        /** @enum {string} */
                                        type: "TextPositionSelector";
                                        exact: string;
                                        offset: number;
                                        length: number;
                                    } | {
                                        /** @enum {string} */
                                        type: "TextQuoteSelector";
                                        exact: string;
                                        prefix?: string;
                                        suffix?: string;
                                    } | ({
                                        /** @enum {string} */
                                        type: "TextPositionSelector";
                                        exact: string;
                                        offset: number;
                                        length: number;
                                    } | {
                                        /** @enum {string} */
                                        type: "TextQuoteSelector";
                                        exact: string;
                                        prefix?: string;
                                        suffix?: string;
                                    })[];
                                };
                                body: {
                                    /** @enum {string} */
                                    type: "TextualBody" | "SpecificResource";
                                    value?: string;
                                    format?: string;
                                    language?: string;
                                    source?: string | null;
                                    /** @default [] */
                                    entityTypes: string[];
                                };
                                creator: {
                                    id: string;
                                    /** @enum {string} */
                                    type: "Person" | "Organization" | "Software";
                                    name: string;
                                    nickname?: string;
                                    email?: string;
                                    email_sha1?: string;
                                    homepage?: string;
                                };
                                created: string;
                                modified?: string;
                                generator?: {
                                    id: string;
                                    /** @enum {string} */
                                    type: "Person" | "Organization" | "Software";
                                    name: string;
                                    nickname?: string;
                                    email?: string;
                                    email_sha1?: string;
                                    homepage?: string;
                                };
                            }[];
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update Document
         * @description Update document metadata (append-only operations - name and content are immutable)
         */
        patch: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        entityTypes?: string[];
                        archived?: boolean;
                    };
                };
            };
            responses: {
                /** @description Document updated successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            document: {
                                id: string;
                                name: string;
                                format: string;
                                archived: boolean;
                                entityTypes: string[];
                                locale?: string;
                                /** @enum {string} */
                                creationMethod: "api" | "upload" | "ui" | "reference" | "clone" | "generated";
                                sourceAnnotationId?: string;
                                sourceDocumentId?: string;
                                creator: string;
                                created: string;
                                contentChecksum: string;
                            };
                            annotations: {
                                id: string;
                                /** @enum {string} */
                                motivation: "assessing" | "bookmarking" | "classifying" | "commenting" | "describing" | "editing" | "highlighting" | "identifying" | "linking" | "moderating" | "questioning" | "replying" | "tagging";
                                target: {
                                    source: string;
                                    selector: {
                                        /** @enum {string} */
                                        type: "TextPositionSelector";
                                        exact: string;
                                        offset: number;
                                        length: number;
                                    } | {
                                        /** @enum {string} */
                                        type: "TextQuoteSelector";
                                        exact: string;
                                        prefix?: string;
                                        suffix?: string;
                                    } | ({
                                        /** @enum {string} */
                                        type: "TextPositionSelector";
                                        exact: string;
                                        offset: number;
                                        length: number;
                                    } | {
                                        /** @enum {string} */
                                        type: "TextQuoteSelector";
                                        exact: string;
                                        prefix?: string;
                                        suffix?: string;
                                    })[];
                                };
                                body: {
                                    /** @enum {string} */
                                    type: "TextualBody" | "SpecificResource";
                                    value?: string;
                                    format?: string;
                                    language?: string;
                                    source?: string | null;
                                    /** @default [] */
                                    entityTypes: string[];
                                };
                                creator: {
                                    id: string;
                                    /** @enum {string} */
                                    type: "Person" | "Organization" | "Software";
                                    name: string;
                                    nickname?: string;
                                    email?: string;
                                    email_sha1?: string;
                                    homepage?: string;
                                };
                                created: string;
                                modified?: string;
                                generator?: {
                                    id: string;
                                    /** @enum {string} */
                                    type: "Person" | "Organization" | "Software";
                                    name: string;
                                    nickname?: string;
                                    email?: string;
                                    email_sha1?: string;
                                    homepage?: string;
                                };
                            }[];
                            highlights: {
                                id: string;
                                /** @enum {string} */
                                motivation: "assessing" | "bookmarking" | "classifying" | "commenting" | "describing" | "editing" | "highlighting" | "identifying" | "linking" | "moderating" | "questioning" | "replying" | "tagging";
                                target: {
                                    source: string;
                                    selector: {
                                        /** @enum {string} */
                                        type: "TextPositionSelector";
                                        exact: string;
                                        offset: number;
                                        length: number;
                                    } | {
                                        /** @enum {string} */
                                        type: "TextQuoteSelector";
                                        exact: string;
                                        prefix?: string;
                                        suffix?: string;
                                    } | ({
                                        /** @enum {string} */
                                        type: "TextPositionSelector";
                                        exact: string;
                                        offset: number;
                                        length: number;
                                    } | {
                                        /** @enum {string} */
                                        type: "TextQuoteSelector";
                                        exact: string;
                                        prefix?: string;
                                        suffix?: string;
                                    })[];
                                };
                                body: {
                                    /** @enum {string} */
                                    type: "TextualBody" | "SpecificResource";
                                    value?: string;
                                    format?: string;
                                    language?: string;
                                    source?: string | null;
                                    /** @default [] */
                                    entityTypes: string[];
                                };
                                creator: {
                                    id: string;
                                    /** @enum {string} */
                                    type: "Person" | "Organization" | "Software";
                                    name: string;
                                    nickname?: string;
                                    email?: string;
                                    email_sha1?: string;
                                    homepage?: string;
                                };
                                created: string;
                                modified?: string;
                                generator?: {
                                    id: string;
                                    /** @enum {string} */
                                    type: "Person" | "Organization" | "Software";
                                    name: string;
                                    nickname?: string;
                                    email?: string;
                                    email_sha1?: string;
                                    homepage?: string;
                                };
                            }[];
                            references: {
                                id: string;
                                /** @enum {string} */
                                motivation: "assessing" | "bookmarking" | "classifying" | "commenting" | "describing" | "editing" | "highlighting" | "identifying" | "linking" | "moderating" | "questioning" | "replying" | "tagging";
                                target: {
                                    source: string;
                                    selector: {
                                        /** @enum {string} */
                                        type: "TextPositionSelector";
                                        exact: string;
                                        offset: number;
                                        length: number;
                                    } | {
                                        /** @enum {string} */
                                        type: "TextQuoteSelector";
                                        exact: string;
                                        prefix?: string;
                                        suffix?: string;
                                    } | ({
                                        /** @enum {string} */
                                        type: "TextPositionSelector";
                                        exact: string;
                                        offset: number;
                                        length: number;
                                    } | {
                                        /** @enum {string} */
                                        type: "TextQuoteSelector";
                                        exact: string;
                                        prefix?: string;
                                        suffix?: string;
                                    })[];
                                };
                                body: {
                                    /** @enum {string} */
                                    type: "TextualBody" | "SpecificResource";
                                    value?: string;
                                    format?: string;
                                    language?: string;
                                    source?: string | null;
                                    /** @default [] */
                                    entityTypes: string[];
                                };
                                creator: {
                                    id: string;
                                    /** @enum {string} */
                                    type: "Person" | "Organization" | "Software";
                                    name: string;
                                    nickname?: string;
                                    email?: string;
                                    email_sha1?: string;
                                    homepage?: string;
                                };
                                created: string;
                                modified?: string;
                                generator?: {
                                    id: string;
                                    /** @enum {string} */
                                    type: "Person" | "Organization" | "Software";
                                    name: string;
                                    nickname?: string;
                                    email?: string;
                                    email_sha1?: string;
                                    homepage?: string;
                                };
                            }[];
                            entityReferences: {
                                id: string;
                                /** @enum {string} */
                                motivation: "assessing" | "bookmarking" | "classifying" | "commenting" | "describing" | "editing" | "highlighting" | "identifying" | "linking" | "moderating" | "questioning" | "replying" | "tagging";
                                target: {
                                    source: string;
                                    selector: {
                                        /** @enum {string} */
                                        type: "TextPositionSelector";
                                        exact: string;
                                        offset: number;
                                        length: number;
                                    } | {
                                        /** @enum {string} */
                                        type: "TextQuoteSelector";
                                        exact: string;
                                        prefix?: string;
                                        suffix?: string;
                                    } | ({
                                        /** @enum {string} */
                                        type: "TextPositionSelector";
                                        exact: string;
                                        offset: number;
                                        length: number;
                                    } | {
                                        /** @enum {string} */
                                        type: "TextQuoteSelector";
                                        exact: string;
                                        prefix?: string;
                                        suffix?: string;
                                    })[];
                                };
                                body: {
                                    /** @enum {string} */
                                    type: "TextualBody" | "SpecificResource";
                                    value?: string;
                                    format?: string;
                                    language?: string;
                                    source?: string | null;
                                    /** @default [] */
                                    entityTypes: string[];
                                };
                                creator: {
                                    id: string;
                                    /** @enum {string} */
                                    type: "Person" | "Organization" | "Software";
                                    name: string;
                                    nickname?: string;
                                    email?: string;
                                    email_sha1?: string;
                                    homepage?: string;
                                };
                                created: string;
                                modified?: string;
                                generator?: {
                                    id: string;
                                    /** @enum {string} */
                                    type: "Person" | "Organization" | "Software";
                                    name: string;
                                    nickname?: string;
                                    email?: string;
                                    email_sha1?: string;
                                    homepage?: string;
                                };
                            }[];
                        };
                    };
                };
            };
        };
        trace?: never;
    };
    "/api/documents/{id}/content": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Document Content
         * @description Get raw content of a document with correct MIME type from document metadata
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Document content with MIME type from document.format */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": string;
                        "text/markdown": string;
                        "application/pdf": string;
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/documents/from-annotation/{annotationId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Document from Annotation
         * @description Create a new document from an annotation/reference
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    annotationId: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        name: string;
                        content: string;
                        format: string;
                        metadata?: {
                            [key: string]: unknown;
                        };
                    };
                };
            };
            responses: {
                /** @description Document created from annotation */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            document?: unknown;
                            annotations: unknown[];
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/documents/{id}/detect-annotations-stream": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Detect Annotations with Progress (SSE)
         * @description Stream real-time entity detection progress via Server-Sent Events
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        entityTypes: string[];
                    };
                };
            };
            responses: {
                /** @description SSE stream opened successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/event-stream": {
                            event: string;
                            data: string;
                            id?: string;
                        };
                    };
                };
                /** @description Authentication required */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Document not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/documents/{id}/detect-entities": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Detect Entities (Job)
         * @description Create an async entity detection job. Use GET /api/jobs/{jobId} to poll status. For real-time updates, use POST /api/documents/{id}/detect-annotations-stream instead.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        entityTypes: string[];
                    };
                };
            };
            responses: {
                /** @description Job created successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            jobId: string;
                            /** @enum {string} */
                            status: "pending" | "running" | "complete" | "failed" | "cancelled";
                            /** @enum {string} */
                            type: "detection" | "generation";
                            created: string;
                        };
                    };
                };
                /** @description Authentication required */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Document not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/documents/{id}/llm-context": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Document LLM Context
         * @description Get document with full context for LLM processing
         */
        get: {
            parameters: {
                query?: {
                    depth?: number;
                    maxDocuments?: number;
                    includeContent?: "true" | "false" | boolean;
                    includeSummary?: "true" | "false" | boolean;
                };
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description LLM context */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            mainDocument: {
                                id: string;
                                name: string;
                                format: string;
                                archived: boolean;
                                entityTypes: string[];
                                locale?: string;
                                /** @enum {string} */
                                creationMethod: "api" | "upload" | "ui" | "reference" | "clone" | "generated";
                                sourceAnnotationId?: string;
                                sourceDocumentId?: string;
                                creator: string;
                                created: string;
                                contentChecksum: string;
                                content?: string;
                            };
                            relatedDocuments: {
                                id: string;
                                name: string;
                                format: string;
                                archived: boolean;
                                entityTypes: string[];
                                locale?: string;
                                /** @enum {string} */
                                creationMethod: "api" | "upload" | "ui" | "reference" | "clone" | "generated";
                                sourceAnnotationId?: string;
                                sourceDocumentId?: string;
                                creator: string;
                                created: string;
                                contentChecksum: string;
                            }[];
                            annotations: {
                                id: string;
                                /** @enum {string} */
                                motivation: "assessing" | "bookmarking" | "classifying" | "commenting" | "describing" | "editing" | "highlighting" | "identifying" | "linking" | "moderating" | "questioning" | "replying" | "tagging";
                                target: {
                                    source: string;
                                    selector: {
                                        /** @enum {string} */
                                        type: "TextPositionSelector";
                                        exact: string;
                                        offset: number;
                                        length: number;
                                    } | {
                                        /** @enum {string} */
                                        type: "TextQuoteSelector";
                                        exact: string;
                                        prefix?: string;
                                        suffix?: string;
                                    } | ({
                                        /** @enum {string} */
                                        type: "TextPositionSelector";
                                        exact: string;
                                        offset: number;
                                        length: number;
                                    } | {
                                        /** @enum {string} */
                                        type: "TextQuoteSelector";
                                        exact: string;
                                        prefix?: string;
                                        suffix?: string;
                                    })[];
                                };
                                body: {
                                    /** @enum {string} */
                                    type: "TextualBody" | "SpecificResource";
                                    value?: string;
                                    format?: string;
                                    language?: string;
                                    source?: string | null;
                                    /** @default [] */
                                    entityTypes: string[];
                                };
                                creator: {
                                    id: string;
                                    /** @enum {string} */
                                    type: "Person" | "Organization" | "Software";
                                    name: string;
                                    nickname?: string;
                                    email?: string;
                                    email_sha1?: string;
                                    homepage?: string;
                                };
                                created: string;
                                modified?: string;
                                generator?: {
                                    id: string;
                                    /** @enum {string} */
                                    type: "Person" | "Organization" | "Software";
                                    name: string;
                                    nickname?: string;
                                    email?: string;
                                    email_sha1?: string;
                                    homepage?: string;
                                };
                            }[];
                            graph: {
                                nodes: {
                                    id: string;
                                    type: string;
                                    label: string;
                                    metadata: {
                                        [key: string]: unknown;
                                    };
                                }[];
                                edges: {
                                    source: string;
                                    target: string;
                                    type: string;
                                    metadata: {
                                        [key: string]: unknown;
                                    };
                                }[];
                            };
                            summary?: string;
                            suggestedReferences?: string[];
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/documents/{documentId}/references/{referenceId}/llm-context": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Reference LLM Context
         * @description Get reference with full context for LLM processing
         */
        get: {
            parameters: {
                query?: {
                    includeSourceContext?: "true" | "false" | boolean;
                    includeTargetContext?: "true" | "false" | boolean;
                    contextWindow?: number;
                };
                header?: never;
                path: {
                    documentId: string;
                    referenceId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Reference LLM context */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            reference: {
                                id: string;
                                /** @enum {string} */
                                motivation: "assessing" | "bookmarking" | "classifying" | "commenting" | "describing" | "editing" | "highlighting" | "identifying" | "linking" | "moderating" | "questioning" | "replying" | "tagging";
                                target: {
                                    source: string;
                                    selector: {
                                        /** @enum {string} */
                                        type: "TextPositionSelector";
                                        exact: string;
                                        offset: number;
                                        length: number;
                                    } | {
                                        /** @enum {string} */
                                        type: "TextQuoteSelector";
                                        exact: string;
                                        prefix?: string;
                                        suffix?: string;
                                    } | ({
                                        /** @enum {string} */
                                        type: "TextPositionSelector";
                                        exact: string;
                                        offset: number;
                                        length: number;
                                    } | {
                                        /** @enum {string} */
                                        type: "TextQuoteSelector";
                                        exact: string;
                                        prefix?: string;
                                        suffix?: string;
                                    })[];
                                };
                                body: {
                                    /** @enum {string} */
                                    type: "TextualBody" | "SpecificResource";
                                    value?: string;
                                    format?: string;
                                    language?: string;
                                    source?: string | null;
                                    /** @default [] */
                                    entityTypes: string[];
                                };
                                creator: {
                                    id: string;
                                    /** @enum {string} */
                                    type: "Person" | "Organization" | "Software";
                                    name: string;
                                    nickname?: string;
                                    email?: string;
                                    email_sha1?: string;
                                    homepage?: string;
                                };
                                created: string;
                                modified?: string;
                                generator?: {
                                    id: string;
                                    /** @enum {string} */
                                    type: "Person" | "Organization" | "Software";
                                    name: string;
                                    nickname?: string;
                                    email?: string;
                                    email_sha1?: string;
                                    homepage?: string;
                                };
                            };
                            sourceDocument: {
                                id: string;
                                name: string;
                                format: string;
                                archived: boolean;
                                entityTypes: string[];
                                locale?: string;
                                /** @enum {string} */
                                creationMethod: "api" | "upload" | "ui" | "reference" | "clone" | "generated";
                                sourceAnnotationId?: string;
                                sourceDocumentId?: string;
                                creator: string;
                                created: string;
                                contentChecksum: string;
                            };
                            targetDocument: {
                                id: string;
                                name: string;
                                format: string;
                                archived: boolean;
                                entityTypes: string[];
                                locale?: string;
                                /** @enum {string} */
                                creationMethod: "api" | "upload" | "ui" | "reference" | "clone" | "generated";
                                sourceAnnotationId?: string;
                                sourceDocumentId?: string;
                                creator: string;
                                created: string;
                                contentChecksum: string;
                            } | null;
                            sourceContext?: {
                                before: string;
                                selected: string;
                                after: string;
                            };
                            targetContext?: {
                                content: string;
                                summary?: string;
                            };
                            suggestedResolution?: {
                                documentId: string;
                                documentName: string;
                                confidence: number;
                                reasoning: string;
                            };
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/documents/{id}/referenced-by": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Referenced By
         * @description Get documents that reference this document
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Documents that reference this document */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            referencedBy: {
                                /** @description Reference annotation ID */
                                id: string;
                                /** @description Name of document containing the reference */
                                documentName: string;
                                target: {
                                    /** @description ID of document containing the reference */
                                    source: string;
                                    selector: {
                                        /** @description The selected text that references this document */
                                        exact: string;
                                    };
                                };
                            }[];
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/documents/{id}/discover-context": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Discover Context
         * @description Discover related documents and concepts
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /** @default 2 */
                        depth?: number;
                    };
                };
            };
            responses: {
                /** @description Context discovery results */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            documents: {
                                id: string;
                                name: string;
                                format: string;
                                archived: boolean;
                                entityTypes: string[];
                                locale?: string;
                                /** @enum {string} */
                                creationMethod: "api" | "upload" | "ui" | "reference" | "clone" | "generated";
                                sourceAnnotationId?: string;
                                sourceDocumentId?: string;
                                creator: string;
                                created: string;
                                contentChecksum: string;
                            }[];
                            connections: {
                                fromId: string;
                                toId: string;
                                type: string;
                                metadata: {
                                    [key: string]: unknown;
                                };
                            }[];
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/documents/token/{token}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Document by Clone Token
         * @description Retrieve a document using a clone token
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    token: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Document retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            sourceDocument: {
                                id: string;
                                name: string;
                                format: string;
                                archived: boolean;
                                entityTypes: string[];
                                locale?: string;
                                /** @enum {string} */
                                creationMethod: "api" | "upload" | "ui" | "reference" | "clone" | "generated";
                                sourceAnnotationId?: string;
                                sourceDocumentId?: string;
                                creator: string;
                                created: string;
                                contentChecksum: string;
                            };
                            /** @description ISO 8601 timestamp when token expires */
                            expiresAt: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/documents/create-from-token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Document from Clone Token
         * @description Create a new document using a clone token
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /** @description Clone token */
                        token: string;
                        /** @description Name for the new document */
                        name: string;
                        /** @description Content for the new document */
                        content: string;
                        /** @description Whether to archive the original document */
                        archiveOriginal?: boolean;
                    };
                };
            };
            responses: {
                /** @description Document created successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            document: {
                                id: string;
                                name: string;
                                format: string;
                                archived: boolean;
                                entityTypes: string[];
                                locale?: string;
                                /** @enum {string} */
                                creationMethod: "api" | "upload" | "ui" | "reference" | "clone" | "generated";
                                sourceAnnotationId?: string;
                                sourceDocumentId?: string;
                                creator: string;
                                created: string;
                                contentChecksum: string;
                            };
                            annotations: {
                                id: string;
                                /** @enum {string} */
                                motivation: "assessing" | "bookmarking" | "classifying" | "commenting" | "describing" | "editing" | "highlighting" | "identifying" | "linking" | "moderating" | "questioning" | "replying" | "tagging";
                                target: {
                                    source: string;
                                    selector: {
                                        /** @enum {string} */
                                        type: "TextPositionSelector";
                                        exact: string;
                                        offset: number;
                                        length: number;
                                    } | {
                                        /** @enum {string} */
                                        type: "TextQuoteSelector";
                                        exact: string;
                                        prefix?: string;
                                        suffix?: string;
                                    } | ({
                                        /** @enum {string} */
                                        type: "TextPositionSelector";
                                        exact: string;
                                        offset: number;
                                        length: number;
                                    } | {
                                        /** @enum {string} */
                                        type: "TextQuoteSelector";
                                        exact: string;
                                        prefix?: string;
                                        suffix?: string;
                                    })[];
                                };
                                body: {
                                    /** @enum {string} */
                                    type: "TextualBody" | "SpecificResource";
                                    value?: string;
                                    format?: string;
                                    language?: string;
                                    source?: string | null;
                                    /** @default [] */
                                    entityTypes: string[];
                                };
                                creator: {
                                    id: string;
                                    /** @enum {string} */
                                    type: "Person" | "Organization" | "Software";
                                    name: string;
                                    nickname?: string;
                                    email?: string;
                                    email_sha1?: string;
                                    homepage?: string;
                                };
                                created: string;
                                modified?: string;
                                generator?: {
                                    id: string;
                                    /** @enum {string} */
                                    type: "Person" | "Organization" | "Software";
                                    name: string;
                                    nickname?: string;
                                    email?: string;
                                    email_sha1?: string;
                                    homepage?: string;
                                };
                            }[];
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/documents/{id}/clone-with-token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Clone Document with Token
         * @description Generate a temporary token for cloning a document
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Clone token generated successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @description Generated clone token */
                            token: string;
                            /** @description ISO 8601 timestamp when token expires */
                            expiresAt: string;
                            document: {
                                id: string;
                                name: string;
                                format: string;
                                archived: boolean;
                                entityTypes: string[];
                                locale?: string;
                                /** @enum {string} */
                                creationMethod: "api" | "upload" | "ui" | "reference" | "clone" | "generated";
                                sourceAnnotationId?: string;
                                sourceDocumentId?: string;
                                creator: string;
                                created: string;
                                contentChecksum: string;
                            };
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/documents/{id}/highlights": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Document Highlights
         * @description Get only highlights (annotations without body of type SpecifiedResource with a source) in a document
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Document highlights */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            highlights: {
                                id: string;
                                /** @enum {string} */
                                motivation: "assessing" | "bookmarking" | "classifying" | "commenting" | "describing" | "editing" | "highlighting" | "identifying" | "linking" | "moderating" | "questioning" | "replying" | "tagging";
                                target: {
                                    source: string;
                                    selector: {
                                        /** @enum {string} */
                                        type: "TextPositionSelector";
                                        exact: string;
                                        offset: number;
                                        length: number;
                                    } | {
                                        /** @enum {string} */
                                        type: "TextQuoteSelector";
                                        exact: string;
                                        prefix?: string;
                                        suffix?: string;
                                    } | ({
                                        /** @enum {string} */
                                        type: "TextPositionSelector";
                                        exact: string;
                                        offset: number;
                                        length: number;
                                    } | {
                                        /** @enum {string} */
                                        type: "TextQuoteSelector";
                                        exact: string;
                                        prefix?: string;
                                        suffix?: string;
                                    })[];
                                };
                                body: {
                                    /** @enum {string} */
                                    type: "TextualBody" | "SpecificResource";
                                    value?: string;
                                    format?: string;
                                    language?: string;
                                    source?: string | null;
                                    /** @default [] */
                                    entityTypes: string[];
                                };
                                creator: {
                                    id: string;
                                    /** @enum {string} */
                                    type: "Person" | "Organization" | "Software";
                                    name: string;
                                    nickname?: string;
                                    email?: string;
                                    email_sha1?: string;
                                    homepage?: string;
                                };
                                created: string;
                                modified?: string;
                                generator?: {
                                    id: string;
                                    /** @enum {string} */
                                    type: "Person" | "Organization" | "Software";
                                    name: string;
                                    nickname?: string;
                                    email?: string;
                                    email_sha1?: string;
                                    homepage?: string;
                                };
                            }[];
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/documents/{id}/references": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Document References
         * @description Get only references (annotations with body of type SpecifiedResource with a source) in a document
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Document references */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            references: {
                                id: string;
                                /** @enum {string} */
                                motivation: "assessing" | "bookmarking" | "classifying" | "commenting" | "describing" | "editing" | "highlighting" | "identifying" | "linking" | "moderating" | "questioning" | "replying" | "tagging";
                                target: {
                                    source: string;
                                    selector: {
                                        /** @enum {string} */
                                        type: "TextPositionSelector";
                                        exact: string;
                                        offset: number;
                                        length: number;
                                    } | {
                                        /** @enum {string} */
                                        type: "TextQuoteSelector";
                                        exact: string;
                                        prefix?: string;
                                        suffix?: string;
                                    } | ({
                                        /** @enum {string} */
                                        type: "TextPositionSelector";
                                        exact: string;
                                        offset: number;
                                        length: number;
                                    } | {
                                        /** @enum {string} */
                                        type: "TextQuoteSelector";
                                        exact: string;
                                        prefix?: string;
                                        suffix?: string;
                                    })[];
                                };
                                body: {
                                    /** @enum {string} */
                                    type: "TextualBody" | "SpecificResource";
                                    value?: string;
                                    format?: string;
                                    language?: string;
                                    source?: string | null;
                                    /** @default [] */
                                    entityTypes: string[];
                                };
                                creator: {
                                    id: string;
                                    /** @enum {string} */
                                    type: "Person" | "Organization" | "Software";
                                    name: string;
                                    nickname?: string;
                                    email?: string;
                                    email_sha1?: string;
                                    homepage?: string;
                                };
                                created: string;
                                modified?: string;
                                generator?: {
                                    id: string;
                                    /** @enum {string} */
                                    type: "Person" | "Organization" | "Software";
                                    name: string;
                                    nickname?: string;
                                    email?: string;
                                    email_sha1?: string;
                                    homepage?: string;
                                };
                            }[];
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/documents/{id}/annotations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Document Annotations
         * @description Get all annotations (both highlights and references) in a document
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Document annotations */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            annotations: {
                                id: string;
                                /** @enum {string} */
                                motivation: "assessing" | "bookmarking" | "classifying" | "commenting" | "describing" | "editing" | "highlighting" | "identifying" | "linking" | "moderating" | "questioning" | "replying" | "tagging";
                                target: {
                                    source: string;
                                    selector: {
                                        /** @enum {string} */
                                        type: "TextPositionSelector";
                                        exact: string;
                                        offset: number;
                                        length: number;
                                    } | {
                                        /** @enum {string} */
                                        type: "TextQuoteSelector";
                                        exact: string;
                                        prefix?: string;
                                        suffix?: string;
                                    } | ({
                                        /** @enum {string} */
                                        type: "TextPositionSelector";
                                        exact: string;
                                        offset: number;
                                        length: number;
                                    } | {
                                        /** @enum {string} */
                                        type: "TextQuoteSelector";
                                        exact: string;
                                        prefix?: string;
                                        suffix?: string;
                                    })[];
                                };
                                body: {
                                    /** @enum {string} */
                                    type: "TextualBody" | "SpecificResource";
                                    value?: string;
                                    format?: string;
                                    language?: string;
                                    source?: string | null;
                                    /** @default [] */
                                    entityTypes: string[];
                                };
                                creator: {
                                    id: string;
                                    /** @enum {string} */
                                    type: "Person" | "Organization" | "Software";
                                    name: string;
                                    nickname?: string;
                                    email?: string;
                                    email_sha1?: string;
                                    homepage?: string;
                                };
                                created: string;
                                modified?: string;
                                generator?: {
                                    id: string;
                                    /** @enum {string} */
                                    type: "Person" | "Organization" | "Software";
                                    name: string;
                                    nickname?: string;
                                    email?: string;
                                    email_sha1?: string;
                                    homepage?: string;
                                };
                            }[];
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/documents/{id}/events": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Document Event History
         * @description Get full event history for a document with optional filtering
         */
        get: {
            parameters: {
                query?: {
                    type?: "document.created" | "document.cloned" | "document.archived" | "document.unarchived" | "highlight.added" | "highlight.removed" | "reference.created" | "reference.resolved" | "reference.deleted" | "entitytag.added" | "entitytag.removed";
                    userId?: string;
                    limit?: number;
                };
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Events retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            events: {
                                event: {
                                    id: string;
                                    type: string;
                                    timestamp: string;
                                    userId: string;
                                    documentId: string;
                                    payload?: unknown;
                                };
                                metadata: {
                                    sequenceNumber: number;
                                    prevEventHash?: string;
                                    checksum?: string;
                                };
                            }[];
                            total: number;
                            documentId: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/documents/{id}/events/stream": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Subscribe to Document Events (SSE)
         * @description Open a Server-Sent Events stream to receive real-time document events
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description SSE stream opened successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/event-stream": {
                            event: string;
                            data: string;
                            id?: string;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/annotations/{id}/create-document": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Document from Annotation
         * @description Create a new document from an annotation and resolve the annotation to it
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        name: string;
                        entityTypes?: string[];
                        content?: string;
                        /** @default text/plain */
                        format?: string;
                        metadata?: {
                            [key: string]: unknown;
                        };
                    };
                };
            };
            responses: {
                /** @description Document created and annotation resolved */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            document: {
                                id: string;
                                name: string;
                                format: string;
                                archived: boolean;
                                entityTypes: string[];
                                locale?: string;
                                /** @enum {string} */
                                creationMethod: "api" | "upload" | "ui" | "reference" | "clone" | "generated";
                                sourceAnnotationId?: string;
                                sourceDocumentId?: string;
                                creator: string;
                                created: string;
                                contentChecksum: string;
                            };
                            annotation: {
                                id: string;
                                /** @enum {string} */
                                motivation: "assessing" | "bookmarking" | "classifying" | "commenting" | "describing" | "editing" | "highlighting" | "identifying" | "linking" | "moderating" | "questioning" | "replying" | "tagging";
                                target: {
                                    source: string;
                                    selector: {
                                        /** @enum {string} */
                                        type: "TextPositionSelector";
                                        exact: string;
                                        offset: number;
                                        length: number;
                                    } | {
                                        /** @enum {string} */
                                        type: "TextQuoteSelector";
                                        exact: string;
                                        prefix?: string;
                                        suffix?: string;
                                    } | ({
                                        /** @enum {string} */
                                        type: "TextPositionSelector";
                                        exact: string;
                                        offset: number;
                                        length: number;
                                    } | {
                                        /** @enum {string} */
                                        type: "TextQuoteSelector";
                                        exact: string;
                                        prefix?: string;
                                        suffix?: string;
                                    })[];
                                };
                                body: {
                                    /** @enum {string} */
                                    type: "TextualBody" | "SpecificResource";
                                    value?: string;
                                    format?: string;
                                    language?: string;
                                    source?: string | null;
                                    /** @default [] */
                                    entityTypes: string[];
                                };
                                creator: {
                                    id: string;
                                    /** @enum {string} */
                                    type: "Person" | "Organization" | "Software";
                                    name: string;
                                    nickname?: string;
                                    email?: string;
                                    email_sha1?: string;
                                    homepage?: string;
                                };
                                created: string;
                                modified?: string;
                                generator?: {
                                    id: string;
                                    /** @enum {string} */
                                    type: "Person" | "Organization" | "Software";
                                    name: string;
                                    nickname?: string;
                                    email?: string;
                                    email_sha1?: string;
                                    homepage?: string;
                                };
                            };
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/annotations/{id}/generate-document": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Generate Document (Job)
         * @description Create an async document generation job from an annotation. Use GET /api/jobs/{jobId} to poll status. For real-time updates, use POST /api/annotations/{id}/generate-document-stream instead.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Annotation ID */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /** @description Document ID containing the annotation */
                        documentId: string;
                        /** @description Custom title for generated document */
                        title?: string;
                        /** @description Custom prompt for content generation */
                        prompt?: string;
                        /** @description Language locale (e.g., "es", "fr", "ja") */
                        locale?: string;
                    };
                };
            };
            responses: {
                /** @description Job created successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            jobId: string;
                            /** @enum {string} */
                            status: "pending" | "running" | "complete" | "failed" | "cancelled";
                            /** @enum {string} */
                            type: "detection" | "generation";
                            created: string;
                        };
                    };
                };
                /** @description Authentication required */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Annotation not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/annotations/{id}/context": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Annotation Context
         * @description Get the context around an annotation
         */
        get: {
            parameters: {
                query?: {
                    contextBefore?: number | null;
                    contextAfter?: number | null;
                };
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Annotation context */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            annotation: {
                                id: string;
                                documentId: string;
                                selector: {
                                    exact: string;
                                    offset: number;
                                    length: number;
                                };
                                referencedDocumentId: string | null;
                                entityTypes: string[];
                                createdBy: string;
                                createdAt: string;
                                updatedAt: string;
                            };
                            context: {
                                before?: string;
                                selected: string;
                                after?: string;
                            };
                            document: {
                                id: string;
                                name: string;
                                format: string;
                                archived: boolean;
                                entityTypes: string[];
                                locale?: string;
                                /** @enum {string} */
                                creationMethod: "api" | "upload" | "ui" | "reference" | "clone" | "generated";
                                sourceAnnotationId?: string;
                                sourceDocumentId?: string;
                                creator: string;
                                created: string;
                                contentChecksum: string;
                            };
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/annotations/{id}/summary": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Contextual Summary
         * @description Get an AI-generated summary of the annotation in context
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Contextual summary */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            summary: string;
                            relevantFields: {
                                [key: string]: unknown;
                            };
                            context: {
                                before?: string;
                                selected: string;
                                after?: string;
                            };
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/annotations/{id}/generate-document-stream": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Generate Document from Reference (SSE)
         * @description Stream real-time document generation progress via Server-Sent Events
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    /** @description Reference/annotation ID */
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /** @description Document ID containing the reference */
                        documentId: string;
                        /** @description Custom title for generated document */
                        title?: string;
                        /** @description Custom prompt for content generation */
                        prompt?: string;
                        /** @description Language locale for generated content (e.g., "es", "fr", "ja") */
                        locale?: string;
                    };
                };
            };
            responses: {
                /** @description SSE stream opened successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/event-stream": {
                            event: string;
                            data: string;
                            id?: string;
                        };
                    };
                };
                /** @description Authentication required */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Reference not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/annotations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Annotations
         * @description List all annotations for a document (requires documentId for O(1) Layer 3 lookup)
         */
        get: {
            parameters: {
                query: {
                    /** @description Document ID to list annotations for */
                    documentId: string;
                    offset?: number | null;
                    limit?: number | null;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Annotations listed successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            annotations: {
                                id: string;
                                /** @enum {string} */
                                motivation: "assessing" | "bookmarking" | "classifying" | "commenting" | "describing" | "editing" | "highlighting" | "identifying" | "linking" | "moderating" | "questioning" | "replying" | "tagging";
                                target: {
                                    source: string;
                                    selector: {
                                        /** @enum {string} */
                                        type: "TextPositionSelector";
                                        exact: string;
                                        offset: number;
                                        length: number;
                                    } | {
                                        /** @enum {string} */
                                        type: "TextQuoteSelector";
                                        exact: string;
                                        prefix?: string;
                                        suffix?: string;
                                    } | ({
                                        /** @enum {string} */
                                        type: "TextPositionSelector";
                                        exact: string;
                                        offset: number;
                                        length: number;
                                    } | {
                                        /** @enum {string} */
                                        type: "TextQuoteSelector";
                                        exact: string;
                                        prefix?: string;
                                        suffix?: string;
                                    })[];
                                };
                                body: {
                                    /** @enum {string} */
                                    type: "TextualBody" | "SpecificResource";
                                    value?: string;
                                    format?: string;
                                    language?: string;
                                    source?: string | null;
                                    /** @default [] */
                                    entityTypes: string[];
                                };
                                creator: {
                                    id: string;
                                    /** @enum {string} */
                                    type: "Person" | "Organization" | "Software";
                                    name: string;
                                    nickname?: string;
                                    email?: string;
                                    email_sha1?: string;
                                    homepage?: string;
                                };
                                created: string;
                                modified?: string;
                                generator?: {
                                    id: string;
                                    /** @enum {string} */
                                    type: "Person" | "Organization" | "Software";
                                    name: string;
                                    nickname?: string;
                                    email?: string;
                                    email_sha1?: string;
                                    homepage?: string;
                                };
                            }[];
                            total: number;
                            offset: number;
                            limit: number;
                        };
                    };
                };
            };
        };
        put?: never;
        /**
         * Create Annotation
         * @description Create a new annotation/reference in a document
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /** @enum {string} */
                        motivation?: "assessing" | "bookmarking" | "classifying" | "commenting" | "describing" | "editing" | "highlighting" | "identifying" | "linking" | "moderating" | "questioning" | "replying" | "tagging";
                        target: {
                            source: string;
                            selector: {
                                /** @enum {string} */
                                type: "TextPositionSelector";
                                exact: string;
                                offset: number;
                                length: number;
                            } | {
                                /** @enum {string} */
                                type: "TextQuoteSelector";
                                exact: string;
                                prefix?: string;
                                suffix?: string;
                            } | ({
                                /** @enum {string} */
                                type: "TextPositionSelector";
                                exact: string;
                                offset: number;
                                length: number;
                            } | {
                                /** @enum {string} */
                                type: "TextQuoteSelector";
                                exact: string;
                                prefix?: string;
                                suffix?: string;
                            })[];
                        };
                        body: {
                            /** @enum {string} */
                            type: "TextualBody" | "SpecificResource";
                            value?: string;
                            source?: string | null;
                            entityTypes?: string[];
                        };
                    };
                };
            };
            responses: {
                /** @description Annotation created successfully */
                201: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            annotation: {
                                id: string;
                                /** @enum {string} */
                                motivation: "assessing" | "bookmarking" | "classifying" | "commenting" | "describing" | "editing" | "highlighting" | "identifying" | "linking" | "moderating" | "questioning" | "replying" | "tagging";
                                target: {
                                    source: string;
                                    selector: {
                                        /** @enum {string} */
                                        type: "TextPositionSelector";
                                        exact: string;
                                        offset: number;
                                        length: number;
                                    } | {
                                        /** @enum {string} */
                                        type: "TextQuoteSelector";
                                        exact: string;
                                        prefix?: string;
                                        suffix?: string;
                                    } | ({
                                        /** @enum {string} */
                                        type: "TextPositionSelector";
                                        exact: string;
                                        offset: number;
                                        length: number;
                                    } | {
                                        /** @enum {string} */
                                        type: "TextQuoteSelector";
                                        exact: string;
                                        prefix?: string;
                                        suffix?: string;
                                    })[];
                                };
                                body: {
                                    /** @enum {string} */
                                    type: "TextualBody" | "SpecificResource";
                                    value?: string;
                                    format?: string;
                                    language?: string;
                                    source?: string | null;
                                    /** @default [] */
                                    entityTypes: string[];
                                };
                                creator: {
                                    id: string;
                                    /** @enum {string} */
                                    type: "Person" | "Organization" | "Software";
                                    name: string;
                                    nickname?: string;
                                    email?: string;
                                    email_sha1?: string;
                                    homepage?: string;
                                };
                                created: string;
                                modified?: string;
                                generator?: {
                                    id: string;
                                    /** @enum {string} */
                                    type: "Person" | "Organization" | "Software";
                                    name: string;
                                    nickname?: string;
                                    email?: string;
                                    email_sha1?: string;
                                    homepage?: string;
                                };
                            };
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/annotations/{id}/resolve": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Resolve Annotation
         * @description Resolve a reference annotation to a target document
         */
        put: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /** @description Target document ID to resolve reference to */
                        documentId: string;
                    };
                };
            };
            responses: {
                /** @description Annotation resolved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            annotation: {
                                id: string;
                                /** @enum {string} */
                                motivation: "assessing" | "bookmarking" | "classifying" | "commenting" | "describing" | "editing" | "highlighting" | "identifying" | "linking" | "moderating" | "questioning" | "replying" | "tagging";
                                target: {
                                    source: string;
                                    selector: {
                                        /** @enum {string} */
                                        type: "TextPositionSelector";
                                        exact: string;
                                        offset: number;
                                        length: number;
                                    } | {
                                        /** @enum {string} */
                                        type: "TextQuoteSelector";
                                        exact: string;
                                        prefix?: string;
                                        suffix?: string;
                                    } | ({
                                        /** @enum {string} */
                                        type: "TextPositionSelector";
                                        exact: string;
                                        offset: number;
                                        length: number;
                                    } | {
                                        /** @enum {string} */
                                        type: "TextQuoteSelector";
                                        exact: string;
                                        prefix?: string;
                                        suffix?: string;
                                    })[];
                                };
                                body: {
                                    /** @enum {string} */
                                    type: "TextualBody" | "SpecificResource";
                                    value?: string;
                                    format?: string;
                                    language?: string;
                                    source?: string | null;
                                    /** @default [] */
                                    entityTypes: string[];
                                };
                                creator: {
                                    id: string;
                                    /** @enum {string} */
                                    type: "Person" | "Organization" | "Software";
                                    name: string;
                                    nickname?: string;
                                    email?: string;
                                    email_sha1?: string;
                                    homepage?: string;
                                };
                                created: string;
                                modified?: string;
                                generator?: {
                                    id: string;
                                    /** @enum {string} */
                                    type: "Person" | "Organization" | "Software";
                                    name: string;
                                    nickname?: string;
                                    email?: string;
                                    email_sha1?: string;
                                    homepage?: string;
                                };
                            };
                            targetDocument: {
                                id: string;
                                name: string;
                                format: string;
                                archived: boolean;
                                entityTypes: string[];
                                locale?: string;
                                /** @enum {string} */
                                creationMethod: "api" | "upload" | "ui" | "reference" | "clone" | "generated";
                                sourceAnnotationId?: string;
                                sourceDocumentId?: string;
                                creator: string;
                                created: string;
                                contentChecksum: string;
                            } | null;
                        };
                    };
                };
            };
        };
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/annotations/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Annotation
         * @description Get an annotation by ID (requires documentId query param for O(1) Layer 3 lookup)
         */
        get: {
            parameters: {
                query: {
                    /** @description Document ID containing the annotation */
                    documentId: string;
                };
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Annotation retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            annotation: {
                                id: string;
                                /** @enum {string} */
                                motivation: "assessing" | "bookmarking" | "classifying" | "commenting" | "describing" | "editing" | "highlighting" | "identifying" | "linking" | "moderating" | "questioning" | "replying" | "tagging";
                                target: {
                                    source: string;
                                    selector: {
                                        /** @enum {string} */
                                        type: "TextPositionSelector";
                                        exact: string;
                                        offset: number;
                                        length: number;
                                    } | {
                                        /** @enum {string} */
                                        type: "TextQuoteSelector";
                                        exact: string;
                                        prefix?: string;
                                        suffix?: string;
                                    } | ({
                                        /** @enum {string} */
                                        type: "TextPositionSelector";
                                        exact: string;
                                        offset: number;
                                        length: number;
                                    } | {
                                        /** @enum {string} */
                                        type: "TextQuoteSelector";
                                        exact: string;
                                        prefix?: string;
                                        suffix?: string;
                                    })[];
                                };
                                body: {
                                    /** @enum {string} */
                                    type: "TextualBody" | "SpecificResource";
                                    value?: string;
                                    format?: string;
                                    language?: string;
                                    source?: string | null;
                                    /** @default [] */
                                    entityTypes: string[];
                                };
                                creator: {
                                    id: string;
                                    /** @enum {string} */
                                    type: "Person" | "Organization" | "Software";
                                    name: string;
                                    nickname?: string;
                                    email?: string;
                                    email_sha1?: string;
                                    homepage?: string;
                                };
                                created: string;
                                modified?: string;
                                generator?: {
                                    id: string;
                                    /** @enum {string} */
                                    type: "Person" | "Organization" | "Software";
                                    name: string;
                                    nickname?: string;
                                    email?: string;
                                    email_sha1?: string;
                                    homepage?: string;
                                };
                            };
                            document: {
                                id: string;
                                name: string;
                                format: string;
                                archived: boolean;
                                entityTypes: string[];
                                locale?: string;
                                /** @enum {string} */
                                creationMethod: "api" | "upload" | "ui" | "reference" | "clone" | "generated";
                                sourceAnnotationId?: string;
                                sourceDocumentId?: string;
                                creator: string;
                                created: string;
                                contentChecksum: string;
                            } | null;
                            resolvedDocument: {
                                id: string;
                                name: string;
                                format: string;
                                archived: boolean;
                                entityTypes: string[];
                                locale?: string;
                                /** @enum {string} */
                                creationMethod: "api" | "upload" | "ui" | "reference" | "clone" | "generated";
                                sourceAnnotationId?: string;
                                sourceDocumentId?: string;
                                creator: string;
                                created: string;
                                contentChecksum: string;
                            } | null;
                        };
                    };
                };
            };
        };
        put?: never;
        post?: never;
        /**
         * Delete Annotation
         * @description Delete an annotation (requires documentId in body for O(1) Layer 3 lookup)
         */
        delete: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        /** @description Document ID containing the annotation (required for O(1) Layer 3 lookup) */
                        documentId: string;
                    };
                };
            };
            responses: {
                /** @description Annotation deleted successfully */
                204: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Annotation not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/documents/{documentId}/annotations/{annotationId}/history": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Annotation History
         * @description Get full event history for a specific annotation (highlight or reference)
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    documentId: string;
                    annotationId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Annotation history retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            events: {
                                id: string;
                                type: string;
                                timestamp: string;
                                userId: string;
                                documentId: string;
                                payload: {
                                    name: string;
                                    format: string;
                                    contentHash: string;
                                    /** @enum {string} */
                                    creationMethod: "api" | "upload" | "ui" | "reference" | "clone" | "generated";
                                    entityTypes?: string[];
                                    metadata?: {
                                        [key: string]: unknown;
                                    };
                                } | {
                                    name: string;
                                    format: string;
                                    contentHash: string;
                                    parentDocumentId: string;
                                    /** @enum {string} */
                                    creationMethod: "api" | "upload" | "ui" | "reference" | "clone" | "generated";
                                    entityTypes?: string[];
                                    metadata?: {
                                        [key: string]: unknown;
                                    };
                                } | {
                                    reason?: string;
                                } | Record<string, never> | {
                                    highlightId: string;
                                    exact: string;
                                    position: {
                                        offset: number;
                                        length: number;
                                    };
                                } | {
                                    highlightId: string;
                                } | {
                                    referenceId: string;
                                    exact: string;
                                    position: {
                                        offset: number;
                                        length: number;
                                    };
                                    entityTypes?: string[];
                                    targetDocumentId?: string;
                                } | {
                                    referenceId: string;
                                    targetDocumentId: string;
                                } | {
                                    referenceId: string;
                                } | {
                                    entityType: string;
                                } | {
                                    entityType: string;
                                };
                                metadata: {
                                    sequenceNumber: number;
                                    prevEventHash?: string;
                                    checksum?: string;
                                };
                            }[];
                            total: number;
                            annotationId: string;
                            documentId: string;
                        };
                    };
                };
                /** @description Annotation not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/entity-types": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Entity Types
         * @description Get list of available entity types for references
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Entity types retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            entityTypes: string[];
                        };
                    };
                };
            };
        };
        put?: never;
        /**
         * Add Entity Type
         * @description Add a new entity type to the collection (append-only, requires moderator/admin)
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        tag: string;
                    };
                };
            };
            responses: {
                /** @description Entity type added successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            success: boolean;
                            entityTypes: string[];
                        };
                    };
                };
                /** @description Forbidden - Moderator or Admin access required */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            error: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/entity-types/bulk": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Bulk Add Entity Types
         * @description Add multiple entity types to the collection (append-only, requires moderator/admin)
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": {
                        tags: string[];
                    };
                };
            };
            responses: {
                /** @description Entity types added successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            success: boolean;
                            entityTypes: string[];
                        };
                    };
                };
                /** @description Forbidden - Moderator or Admin access required */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            error: string;
                        };
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/jobs/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Job Status
         * @description Get the current status and progress of an async job
         */
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Job status retrieved successfully */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            jobId: string;
                            /** @enum {string} */
                            type: "detection" | "generation";
                            /** @enum {string} */
                            status: "pending" | "running" | "complete" | "failed" | "cancelled";
                            userId: string;
                            created: string;
                            startedAt?: string;
                            completedAt?: string;
                            error?: string;
                            progress?: unknown;
                            result?: unknown;
                        };
                    };
                };
                /** @description Job not found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: never;
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
