name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./apps/frontend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: './apps/frontend/package-lock.json'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint || echo "No lint script found"
        continue-on-error: true

      - name: Run type checking
        run: npm run type-check || npx tsc --noEmit
        continue-on-error: true

      - name: Run all tests
        run: npm test

      - name: Build application
        run: npm run build
        env:
          NEXT_PUBLIC_API_URL: http://localhost:3001
          NEXT_PUBLIC_SITE_NAME: Semiont
          NEXT_PUBLIC_OAUTH_ALLOWED_DOMAINS: example.com

  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./apps/backend

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpassword
          POSTGRES_USER: testuser
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: './apps/backend/package-lock.json'

      - name: Install dependencies
        run: npm ci

      - name: Setup test database
        run: |
          echo "DATABASE_URL=postgresql://testuser:testpassword@localhost:5432/testdb" > .env.test
          npx prisma db push
        env:
          DATABASE_URL: postgresql://testuser:testpassword@localhost:5432/testdb

      - name: Run type checking
        run: npx tsc --noEmit
        continue-on-error: true

      - name: Run all tests
        run: npm test
        env:
          DATABASE_URL: postgresql://testuser:testpassword@localhost:5432/testdb
          JWT_SECRET: test-secret-for-ci
          GOOGLE_CLIENT_ID: test-client-id
          GOOGLE_CLIENT_SECRET: test-client-secret

      - name: Build application
        run: npm run build
        env:
          DATABASE_URL: postgresql://testuser:testpassword@localhost:5432/testdb
          JWT_SECRET: test-secret-for-ci
          GOOGLE_CLIENT_ID: test-client-id
          GOOGLE_CLIENT_SECRET: test-client-secret

  cdk-test:
    name: CDK Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./cdk

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: './cdk/package-lock.json'

      - name: Install dependencies
        run: npm ci

      - name: Run CDK tests
        run: npm test

      - name: CDK synth
        run: npx cdk synth
        env:
          CDK_DEFAULT_ACCOUNT: "123456789012"
          CDK_DEFAULT_REGION: "us-east-1"

  scripts-test:
    name: Scripts Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./scripts

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: './scripts/package-lock.json'

      - name: Install dependencies
        run: npm ci

      - name: Run type checking
        run: npx tsc --noEmit
        continue-on-error: true

      - name: Build scripts
        run: npm run build || echo "No build script found"
        continue-on-error: true