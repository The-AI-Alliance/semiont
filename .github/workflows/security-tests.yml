name: Security Tests

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'apps/frontend/**'
      - 'apps/backend/**'
      - '.github/workflows/security-tests.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'apps/frontend/**'
      - 'apps/backend/**'
      - '.github/workflows/security-tests.yml'
  workflow_dispatch: # Allow manual triggering

jobs:
  frontend-security:
    name: Frontend Security Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./apps/frontend

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'package-lock.json'

      - name: Install dependencies
        run: cd ../.. && npm install

      - name: Build required packages
        run: |
          cd ../../packages/api-types && npm run build
          cd ../config-loader && npm run build

      - name: Run security tests
        run: npm run test:security

      - name: Run all tests with coverage
        run: npm run test:coverage

      - name: Build application
        run: npm run build
        env:
          NEXT_PUBLIC_API_URL: http://localhost:3001
          NEXT_PUBLIC_SITE_NAME: Semiont Test
          NEXT_PUBLIC_OAUTH_ALLOWED_DOMAINS: example.com

      - name: Start application for security verification
        run: |
          npm start &
          APP_PID=$!
          echo "APP_PID=$APP_PID" >> $GITHUB_ENV
          # Wait for app to start
          timeout 60 bash -c 'until curl -f http://localhost:3000/api/health 2>/dev/null; do sleep 2; done' || echo "Health check endpoint not available, continuing..."
          sleep 5
        env:
          NEXT_PUBLIC_API_URL: http://localhost:3001
          NEXT_PUBLIC_SITE_NAME: Semiont Test

      - name: Verify no admin content leakage
        run: |
          echo "Testing admin route security..."
          
          # Test 1: Verify admin route returns 200 (not 307 redirect)
          status_code=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3000/admin)
          if [ "$status_code" != "200" ]; then
            echo "❌ SECURITY FAILURE: Admin route returned $status_code instead of 200"
            exit 1
          fi
          echo "✅ Admin route returns proper 200 status code"
          
          # Test 2: Verify no admin content in response body
          response=$(curl -s http://localhost:3000/admin)
          
          # Check for admin content that should NOT be present
          if echo "$response" | grep -qi "admin.*dashboard\|user.*management\|delete.*user\|admin.*control"; then
            echo "❌ SECURITY FAILURE: Admin content leaked in response!"
            echo "Leaked content found in response"
            exit 1
          fi
          echo "✅ No admin content leaked in unauthorized response"
          
          # Test 3: Verify proper access denied message is present
          if ! echo "$response" | grep -q "Access Denied"; then
            echo "❌ SECURITY FAILURE: Access Denied message not found"
            exit 1
          fi
          echo "✅ Proper 'Access Denied' message present"
          
          # Test 4: Verify no sensitive data patterns
          if echo "$response" | grep -qE "postgresql://|sk_[a-zA-Z0-9]+|@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}|DELETE|admin@"; then
            echo "❌ SECURITY FAILURE: Sensitive data patterns found in response!"
            exit 1
          fi
          echo "✅ No sensitive data patterns detected"
          
          echo "🎉 All frontend security checks passed!"

      - name: Stop application
        if: always()
        run: |
          if [ ! -z "$APP_PID" ]; then
            kill $APP_PID || true
          fi
          # Kill any remaining Node.js processes
          pkill -f "next.*start" || true

      - name: Upload test coverage
        uses: codecov/codecov-action@v4
        if: always()
        with:
          file: ./apps/frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage
        continue-on-error: true

  backend-security:
    name: Backend Security Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./apps/backend

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpassword
          POSTGRES_USER: testuser
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'package-lock.json'

      - name: Install dependencies
        run: cd ../.. && npm install

      - name: Build required packages
        run: |
          cd ../../packages/api-types && npm run build
          cd ../config-loader && npm run build

      - name: Setup test database
        run: |
          echo "DATABASE_URL=postgresql://testuser:testpassword@localhost:5432/testdb" > .env.test
          npx prisma db push
        env:
          DATABASE_URL: postgresql://testuser:testpassword@localhost:5432/testdb

      - name: Run security tests
        run: npm run test:security
        env:
          DATABASE_URL: postgresql://testuser:testpassword@localhost:5432/testdb
          JWT_SECRET: test-secret-for-ci
          GOOGLE_CLIENT_ID: test-client-id
          GOOGLE_CLIENT_SECRET: test-client-secret

      - name: Run all tests with coverage
        run: npm run test:coverage
        env:
          DATABASE_URL: postgresql://testuser:testpassword@localhost:5432/testdb
          JWT_SECRET: test-secret-for-ci
          GOOGLE_CLIENT_ID: test-client-id
          GOOGLE_CLIENT_SECRET: test-client-secret

      - name: Build application
        run: npm run build
        env:
          DATABASE_URL: postgresql://testuser:testpassword@localhost:5432/testdb
          JWT_SECRET: test-secret-for-ci
          GOOGLE_CLIENT_ID: test-client-id
          GOOGLE_CLIENT_SECRET: test-client-secret

      - name: Start backend for API security verification
        run: |
          npm start &
          APP_PID=$!
          echo "BACKEND_PID=$APP_PID" >> $GITHUB_ENV
          # Wait for backend to start
          timeout 60 bash -c 'until curl -f http://localhost:3001/api/health 2>/dev/null; do sleep 2; done'
          sleep 2
        env:
          DATABASE_URL: postgresql://testuser:testpassword@localhost:5432/testdb
          JWT_SECRET: test-secret-for-ci
          GOOGLE_CLIENT_ID: test-client-id
          GOOGLE_CLIENT_SECRET: test-client-secret
          PORT: 3001

      - name: Verify API security
        run: |
          echo "Testing backend API security..."
          
          # Test 1: Verify admin endpoints require authentication
          endpoints=("/api/admin/users" "/api/admin/users/stats")
          
          for endpoint in "${endpoints[@]}"; do
            echo "Testing $endpoint..."
            
            # Test without Authorization header
            status_code=$(curl -s -o /dev/null -w "%{http_code}" "http://localhost:3001$endpoint")
            if [ "$status_code" != "401" ]; then
              echo "❌ SECURITY FAILURE: $endpoint returned $status_code instead of 401 for missing auth"
              exit 1
            fi
            echo "✅ $endpoint properly returns 401 for missing authentication"
            
            # Test with invalid token
            status_code=$(curl -s -o /dev/null -w "%{http_code}" -H "Authorization: Bearer invalid-token" "http://localhost:3001$endpoint")
            if [ "$status_code" != "401" ]; then
              echo "❌ SECURITY FAILURE: $endpoint returned $status_code instead of 401 for invalid token"
              exit 1
            fi
            echo "✅ $endpoint properly returns 401 for invalid token"
          done
          
          # Test 2: Verify error responses don't leak sensitive data
          response=$(curl -s http://localhost:3001/api/admin/users)
          if echo "$response" | grep -qE "postgresql://|secret|jwt.*key|password|database.*connection|stack.*trace|\.js:[0-9]+"; then
            echo "❌ SECURITY FAILURE: Sensitive data leaked in API error response!"
            echo "Response: $response"
            exit 1
          fi
          echo "✅ No sensitive data leaked in API error responses"
          
          # Test 3: Verify proper JSON error format
          if ! echo "$response" | grep -q '"error".*"Unauthorized"'; then
            echo "❌ SECURITY FAILURE: API doesn't return proper JSON error format"
            exit 1
          fi
          echo "✅ Proper JSON error format returned"
          
          echo "🎉 All backend API security checks passed!"

      - name: Stop backend
        if: always()
        run: |
          if [ ! -z "$BACKEND_PID" ]; then
            kill $BACKEND_PID || true
          fi
          # Kill any remaining Node.js processes
          pkill -f "node.*dist/index.js" || true

      - name: Upload test coverage
        uses: codecov/codecov-action@v4
        if: always()
        with:
          file: ./apps/backend/coverage/lcov.info
          flags: backend
          name: backend-coverage
        continue-on-error: true

  security-report:
    name: Security Test Report
    runs-on: ubuntu-latest
    needs: [frontend-security, backend-security]
    if: always()

    steps:
      - name: Report Results
        run: |
          echo "## 🛡️ Security Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.frontend-security.result }}" == "success" ]; then
            echo "✅ **Frontend Security Tests**: PASSED" >> $GITHUB_STEP_SUMMARY
            echo "- Admin route security verified" >> $GITHUB_STEP_SUMMARY
            echo "- No information disclosure detected" >> $GITHUB_STEP_SUMMARY
            echo "- Authentication checks working properly" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Frontend Security Tests**: FAILED" >> $GITHUB_STEP_SUMMARY
            echo "- **CRITICAL**: Security vulnerabilities detected!" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.backend-security.result }}" == "success" ]; then
            echo "✅ **Backend Security Tests**: PASSED" >> $GITHUB_STEP_SUMMARY
            echo "- API authentication enforced" >> $GITHUB_STEP_SUMMARY
            echo "- Admin endpoints properly protected" >> $GITHUB_STEP_SUMMARY
            echo "- No sensitive data leakage" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Backend Security Tests**: FAILED" >> $GITHUB_STEP_SUMMARY
            echo "- **CRITICAL**: API security vulnerabilities detected!" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ needs.frontend-security.result }}" == "success" ] && [ "${{ needs.backend-security.result }}" == "success" ]; then
            echo "🎉 **Overall Status**: ALL SECURITY CHECKS PASSED" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "The application is secure and ready for deployment." >> $GITHUB_STEP_SUMMARY
          else
            echo "🚨 **Overall Status**: SECURITY FAILURES DETECTED" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**DO NOT MERGE** - Fix security issues before proceeding." >> $GITHUB_STEP_SUMMARY
          fi

      - name: Fail if security tests failed
        if: needs.frontend-security.result != 'success' || needs.backend-security.result != 'success'
        run: |
          echo "Security tests failed. Failing the workflow."
          exit 1