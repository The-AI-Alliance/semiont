#!/usr/bin/env bash

# Semiont management wrapper script
# Usage: ./semiont [command] [args...]

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Ensure dependencies are installed
if [ ! -d "$SCRIPT_DIR/node_modules" ]; then
    echo "üì¶ Installing dependencies..."
    cd "$SCRIPT_DIR" && npm install
fi

COMMAND=${1:-help}

case $COMMAND in
  "logs")
    shift
    cd "$SCRIPT_DIR" && npx tsx logs.ts "$@"
    ;;
  "status")
    shift  
    cd "$SCRIPT_DIR" && npx tsx status.ts "$@"
    ;;
  "secrets")
    shift
    # Check if this is for local development
    if [[ "$1" == "local" ]] || [[ "$SEMIONT_ENV" == "development" && "$1" == "set" && ("$2" == "database-password" || "$2" == "jwt-secret") ]]; then
      if [[ "$1" == "local" ]]; then
        shift  # Remove 'local' from arguments
      fi
      cd "$SCRIPT_DIR" && npx tsx local-secrets.ts "$@"
    else
      cd "$SCRIPT_DIR" && npx tsx secrets.ts "$@"
    fi
    ;;
  "restart")
    shift
    cd "$SCRIPT_DIR" && npx tsx restart.ts "$@"
    ;;
  "exec")
    shift
    cd "$SCRIPT_DIR" && npx tsx exec.ts "$@"
    ;;
  "backup")
    shift
    cd "$SCRIPT_DIR" && npx tsx db-backup.ts "$@"
    ;;
  "create")
    shift
    cd "$SCRIPT_DIR" && npx tsx create.ts "$@"
    ;;
  "update-images")
    shift
    cd "$SCRIPT_DIR" && npx tsx update-images.ts "$@"
    ;;
  "clean")
    shift
    cd "$SCRIPT_DIR" && npx tsx clean.ts "$@"
    ;;
  "build")
    shift
    cd "$SCRIPT_DIR" && npx tsx build.ts "$@"
    ;;
  "test")
    shift
    cd "$SCRIPT_DIR" && npx tsx test.ts "$@"
    ;;
  "performance"|"perf")
    shift
    cd "$SCRIPT_DIR" && npx tsx performance.ts "$@"
    ;;
  "local")
    shift
    cd "$SCRIPT_DIR" && npx tsx local.ts "$@"
    ;;
  "help"|*)
    echo "üöÄ Semiont Management Tool"
    echo ""
    echo "Usage: $0 [command] [args...]"
    echo ""
    echo "üèóÔ∏è  Production Commands:"
    echo "   logs [tail|follow]     - View container logs"
    echo "   status                 - Check deployment status"
    echo "   secrets [list|get|set] - Manage secrets (OAuth, JWT, etc.)"
    echo "   restart [frontend|backend|both] - Restart Semiont services"
    echo "   exec [command]         - Execute command in container"
    echo "   backup [name]          - Backup database"
    echo "   create [infra|app|all] - Create infrastructure stacks"
    echo "   update-images          - Push images to ECR and update ECS"
    echo "   clean [--docker|--node|--cdk|--nextjs] - Clean build artifacts and caches"
    echo "   build [frontend|backend|docker|all] - Build applications and Docker images"
    echo "   test [frontend|backend|security|all] - Run automated tests"
    echo "   performance [analyze|monitor|check] - Performance analysis"
    echo ""
    echo "üíª Local Development Commands:"
    echo "   local start [--reset]  - Start full development environment"
    echo "   local stop             - Stop all local services"
    echo "   local status           - Show local services status"
    echo ""
    echo "   local db start [--seed] - Start PostgreSQL container"
    echo "   local db reset [--seed] - Reset database with fresh data"
    echo "   local db stop          - Stop database container"
    echo ""
    echo "   local backend start [--fresh] - Start backend (ensures db running)"
    echo "   local backend stop     - Stop backend service"
    echo ""
    echo "   local frontend start [--mock] - Start frontend (mock or real API)"
    echo "   local frontend stop    - Stop frontend service"
    echo ""
    echo "Examples:"
    echo "üèóÔ∏è  Production:"
    echo "   $0 status              # Check service status"
    echo "   $0 logs follow         # Follow logs in real-time"
    echo "   $0 secrets set oauth/google    # Configure Google OAuth"
    echo "   $0 test                # Run all tests"
    echo ""
    echo "üíª Local Development:"
    echo "   $0 local start         # Start everything (db + backend + frontend)"
    echo "   $0 local start --reset # Fresh start with clean database"
    echo "   $0 local db start --seed # Start database with sample data"
    echo "   $0 local frontend start --mock # Frontend with mock API only"
    echo "   $0 local status        # Check what's running locally"
    echo ""
    ;;
esac