#!/usr/bin/env bash

# Semiont management wrapper script
# Usage: ./semiont [command] [args...]

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/.." && pwd)"
SCRIPTS_DIR="$PROJECT_ROOT/packages/scripts"

# Ensure dependencies are installed and scripts are built
if [ ! -d "$PROJECT_ROOT/node_modules" ]; then
    echo "üì¶ Installing dependencies..."
    cd "$PROJECT_ROOT" && npm install
fi

# Build config-loader first if needed
CONFIG_DIR="$PROJECT_ROOT/packages/config-loader"
if [ ! -d "$CONFIG_DIR/dist" ] || [ "$CONFIG_DIR/tsconfig.json" -nt "$CONFIG_DIR/dist" ] || find "$CONFIG_DIR" -name "*.ts" -newer "$CONFIG_DIR/dist" -print -quit | grep -q .; then
    echo "üî® Building config..."
    cd "$CONFIG_DIR" && npm run build
fi

# Build scripts if needed (or if any .ts file is newer than dist)
if [ ! -d "$SCRIPTS_DIR/dist" ] || [ "$SCRIPTS_DIR/tsconfig.json" -nt "$SCRIPTS_DIR/dist" ] || find "$SCRIPTS_DIR" -name "*.ts" -newer "$SCRIPTS_DIR/dist" -print -quit | grep -q .; then
    echo "üî® Building scripts..."
    cd "$SCRIPTS_DIR" && npm run build
fi

COMMAND=${1:-help}

case $COMMAND in
  "watch")
    shift
    cd "$SCRIPTS_DIR" && node dist/watch.mjs "$@"
    ;;
  "check")
    shift  
    cd "$SCRIPTS_DIR" && node dist/check.mjs "$@"
    ;;
  "configure")
    shift
    # Check if this is for local development
    if [[ "$1" == "local" ]] || [[ "$SEMIONT_ENV" == "development" && "$1" == "set" && ("$2" == "database-password" || "$2" == "jwt-secret") ]]; then
      if [[ "$1" == "local" ]]; then
        shift  # Remove 'local' from arguments
      fi
      cd "$SCRIPTS_DIR" && node dist/local-secrets.mjs "$@"
    else
      cd "$SCRIPTS_DIR" && node dist/configure.mjs "$@"
    fi
    ;;
  "start")
    shift
    cd "$SCRIPTS_DIR" && node dist/start.mjs "$@"
    ;;
  "stop")
    shift
    cd "$SCRIPTS_DIR" && node dist/stop.mjs "$@"
    ;;
  "restart")
    shift
    cd "$SCRIPTS_DIR" && node dist/restart.mjs "$@"
    ;;
  "exec")
    shift
    cd "$SCRIPTS_DIR" && node dist/exec.mjs "$@"
    ;;
  "backup")
    shift
    cd "$SCRIPTS_DIR" && node dist/db-backup.mjs "$@"
    ;;
  "provision")
    shift
    cd "$SCRIPTS_DIR" && node dist/provision.mjs "$@"
    ;;
  "deploy")
    shift
    cd "$SCRIPTS_DIR" && node dist/deploy.mjs "$@"
    ;;
  "clean")
    shift
    cd "$SCRIPTS_DIR" && node dist/clean.mjs "$@"
    ;;
  "build")
    shift
    cd "$SCRIPTS_DIR" && node dist/build.mjs "$@"
    ;;
  "test")
    shift
    cd "$SCRIPTS_DIR" && node dist/test.mjs "$@"
    ;;
  "benchmark")
    shift
    cd "$SCRIPTS_DIR" && node dist/benchmark.mjs "$@"
    ;;
  "help"|*)
    echo "üöÄ Semiont Management Tool"
    echo ""
    echo "Usage: $0 [command] [args...]"
    echo ""
    echo "üî® Development:"
    echo "   start <env>            - Start services in any environment"
    echo "   stop <env>             - Stop services in any environment"  
    echo "   restart <env>          - Restart services in any environment"
    echo "   check                  - Check system health and status"
    echo ""
    echo "üß™ Testing:"
    echo "   test [options]         - Run automated tests"
    echo ""
    echo "üèóÔ∏è Build & Deploy:"
    echo "   build [target]         - Build applications and Docker images"
    echo "   provision <env>        - Create cloud infrastructure (one-time)"
    echo "   deploy <env>           - Deploy application code and configuration"
    echo ""
    echo "üìä Operations:"
    echo "   watch [logs|metrics]   - Monitor logs and system metrics"
    echo "   backup [name]          - Backup database"
    echo "   configure <cmd>        - Configure application settings and secrets"
    echo "   exec [command]         - Execute command in container"
    echo ""
    echo "üîß Utilities:"
    echo "   clean [target]         - Clean build artifacts and caches"
    echo "   benchmark [action]     - Performance benchmarking and analysis"
    echo ""
    echo "Examples:"
    echo "   # Local Development:"
    echo "   $0 start local               # Start all services locally"
    echo "   $0 start local --service frontend --mock  # Frontend with mock API"
    echo "   $0 stop local                # Stop all local services"
    echo ""
    echo "   # Cloud Deployment:"
    echo "   $0 provision production      # One-time infrastructure setup"
    echo "   $0 deploy production         # Deploy code changes to production"
    echo "   $0 start staging --service backend  # Start backend service in staging"
    echo "   $0 restart production --service frontend  # Restart frontend in production"
    echo ""
    echo "   # Operations:"
    echo "   $0 check                     # Check system health"
    echo "   $0 watch logs                # Monitor logs continuously"
    echo "   $0 watch metrics             # Monitor system metrics"
    echo "   $0 test --suite unit --service frontend  # Unit tests for frontend"
    echo ""
    ;;
esac